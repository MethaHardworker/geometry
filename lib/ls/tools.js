// Generated by LiveScript 1.6.0
(function(){
  var dot, norm, vadd, vsub, flip, vscale, cross, normalize, equal, nequal, gequal, lequal, equalMod, count, compare, implies, conjunction;
  dot = function(a, b){
    return sum(zipWith(curry$(function(x$, y$){
      return x$ * y$;
    }), a, b));
  };
  norm = function(v){
    return sqrt(dot(v, v));
  };
  vadd = function(a, b){
    return zipWith(curry$(function(x$, y$){
      return x$ + y$;
    }), a, b);
  };
  vsub = function(a, b){
    return zipWith(curry$(function(x$, y$){
      return x$ - y$;
    }), a, b);
  };
  flip = function(v){
    return map((function(it){
      return 0 - it;
    }), v);
  };
  vscale = function(v, a){
    return map((function(it){
      return it * a;
    }), v);
  };
  cross = function(arg$, arg1$){
    var x1, y1, x2, y2;
    x1 = arg$[0], y1 = arg$[1];
    x2 = arg1$[0], y2 = arg1$[1];
    return x1 * y2 - x2 * y1;
  };
  normalize = function(v){
    if (n === 0) {
      return v;
    } else {
      return vscale(v(1 / norm(v)));
    }
  };
  equal = function(a, b){
    switch (false) {
    case !(Number.isFinite(a) && Number.isFinite(b)):
      return abs(a - b) < 1e-10 || abs(a - b) < 1e-10 * abs(a + b);
    case !(a instanceof Figure && a instanceof Figure):
      return a.isEqual(b);
    case !(Array.isArray(a) && Array.isArray(b)):
      return a.length === b.length && a.every(function(x, i){
        return equal(x, b[i]);
      });
    default:
      return a === b;
    }
  };
  nequal = function(a, b){
    return !equal(a, b);
  };
  gequal = function(a, b){
    return a > b || equal(a, b);
  };
  lequal = function(a, b){
    return a < b || equal(a, b);
  };
  equalMod = function(m){
    return function(a, b){
      var ref$;
      return equal(((a) % (ref$ = m) + ref$) % ref$, ((b) % (ref$ = m) + ref$) % ref$);
    };
  };
  count = curry$(function(c, f){
    return function(){
      var x, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      x = res$;
      c.counter++;
      return f.apply(null, x);
    };
  });
  compare = function(x, y){
    switch (false) {
    case !equal(x, y):
      return 'EQ';
    case !(x < y):
      return 'LT';
    case !(x > y):
      return 'GT';
    }
  };
  implies = function(P, Q){
    return function(){
      var x, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      x = res$;
      if (P.apply(null, x)) {
        return Q.apply(null, x);
      } else {
        return true;
      }
    };
  };
  conjunction = function(ps){
    return function(){
      var xs, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      xs = res$;
      return all(function(p){
        return p.apply(null, xs);
      }, ps);
    };
  };
  window.norm = norm;
  window.dot = dot;
  window.cross = cross;
  window.flip = flip;
  window.vadd = vadd;
  window.vscale = vscale;
  window.equal = equal;
  window.nequal = nequal;
  window.gequal = gequal;
  window.lequal = lequal;
  window.equalMod = equalMod;
  window.count = count;
  window.compare = compare;
  window.implies = implies;
  window.conjunction = conjunction;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
