// Generated by LiveScript 1.6.0
(function(){
  var equal, nequal, gequal, lequal, equalMod, count, compose, compare, implies, conjunction;
  equal = function(a, b){
    switch (false) {
    case !(Number.isFinite(a) && Number.isFinite(b)):
      return abs(a - b) < 1e-10 || abs(a - b) < 1e-10 * abs(a + b);
    case !(a instanceof Figure && a instanceof Figure):
      return a.isEqual(b);
    case !(Array.isArray(a) && Array.isArray(b)):
      return a.length === b.length && a.every(function(x, i){
        return equal(x, b[i]);
      });
    default:
      return a === b;
    }
  };
  nequal = function(a, b){
    return !equal(a, b);
  };
  gequal = function(a, b){
    return a > b || equal(a, b);
  };
  lequal = function(a, b){
    return a < b || equal(a, b);
  };
  equalMod = function(m){
    return function(a, b){
      var ref$;
      return equal(((a) % (ref$ = m) + ref$) % ref$, ((b) % (ref$ = m) + ref$) % ref$);
    };
  };
  count = function(c){
    return function(f){
      return function(){
        var x, res$, i$, to$;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        x = res$;
        c.counter++;
        return f.apply(null, x);
      };
    };
  };
  compose = function(f, g){
    return function(){
      var x, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      x = res$;
      return apply(f, g.apply(null, x));
    };
  };
  compare = function(x, y){
    switch (false) {
    case !equal(x, y):
      return 'EQ';
    case !(x < y):
      return 'LT';
    case !(x > y):
      return 'GT';
    }
  };
  implies = function(P, Q){
    return function(){
      var x, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      x = res$;
      if (P.apply(null, x)) {
        return Q.apply(null, x);
      } else {
        return true;
      }
    };
  };
  conjunction = function(ps){
    return function(){
      var xs, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      xs = res$;
      return ps.every(function(p){
        return p.apply(null, xs);
      });
    };
  };
  window.equal = equal;
  window.nequal = nequal;
  window.gequal = gequal;
  window.lequal = lequal;
  window.equalMod = equalMod;
  window.count = count;
  window.compose = compose;
  window.compare = compare;
  window.implies = implies;
  window.conjunction = conjunction;
}).call(this);
