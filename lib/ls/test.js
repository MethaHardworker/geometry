// Generated by LiveScript 1.6.0
(function(){
  var implies, labeled, anyParam, anyPoint, anyAngleValue, mkAngle, anyAngle, anySegment, anyLine, anyRay, anyRadius, anyCircle, anyTriangle, Any, testSequence, testTests, testPoints, testTransformations, testLines, allTests;
  implies = function(P, Q){
    if (P) {
      return Q;
    } else {
      return true;
    }
  };
  labeled = curry$(function(f, l){
    return function(){
      var x, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      x = res$;
      if (l) {
        return f.apply(null, x).label(l);
      } else {
        return f.apply(null, x);
      }
    };
  });
  anyParam = function(a, b){
    a == null && (a = 0);
    b == null && (b = 1);
    return anyNum().range(a, b).precision(0.01).ascending();
  };
  anyPoint = function(l){
    return args(anyPos()).iso(labeled(point, l), function(p){
      return [p.xy];
    });
  };
  anyAngleValue = function(){
    return new ArbitraryNumber(0, 360).precision(1).ascending();
  };
  mkAngle = function(v, s, e){
    var x$;
    x$ = new Angle();
    x$.vertex = v;
    x$.start = s;
    x$.end = e;
    return x$;
  };
  anyAngle = function(){
    return args(anyPoint(), anyAngleValue(), anyAngleValue()).iso(mkAngle, function(a){
      return [a.vertex, a.start, a.end];
    });
  };
  anySegment = function(l){
    return args(anyPoint(), anyPoint()).iso(labeled(segment, l), function(s){
      return [s.point(0), s.point(1)];
    });
  };
  anyLine = function(l){
    return args(anyPoint(), anyPoint()).iso(labeled(line, l), function(l){
      return [l.point(0), l.point(1)];
    });
  };
  anyRay = function(l){
    return args(anyPoint(), anyAngleValue()).iso(labeled(ray, l), function(r){
      return [r.start, r.angle(0)];
    });
  };
  anyRadius = function(){
    return anyNum().range(1, paperSize / 4).precision(0.25).ascending();
  };
  anyCircle = function(){
    return args(anyRadius(), anyPoint()).iso(circle, function(c){
      return [c.R, c.center];
    }).ascending();
  };
  anyTriangle = function(){
    return args(anyPoint(), anyPoint(), anyPoint()).iso(new Triangle, function(it){
      return it.vertices;
    }).filter(function(it){
      return it.isNontrivial;
    });
  };
  Any = {
    num: anyNum,
    param: anyParam,
    point: anyPoint,
    xy: anyPos,
    angle: anyAngle,
    angleValue: anyAngleValue,
    line: anyLine,
    ray: anyRay,
    segment: anySegment,
    circle: anyCircle,
    triangle: anyTriangle
  };
  window.Any = Any;
  testSequence = {
    name: 'Sequences',
    log: false,
    suite: [
      {
        name: 'head',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).head;
        },
        result: 1
      }, {
        name: 'tail1',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).tail.head;
        },
        result: 2
      }, {
        name: 'tail2',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).tail.tail.head;
        },
        result: 3
      }, {
        name: 'list1',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).list;
        },
        result: [1, 2, 3, 4, 5]
      }, {
        name: 'take1',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).take(3).list;
        },
        result: [1, 2, 3]
      }, {
        name: 'take2',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).take(30).list;
        },
        result: [1, 2, 3, 4, 5]
      }, {
        name: 'emptyness1',
        run: function(){
          return new Sequence([]).isEmpty;
        }
      }, {
        name: 'emptyness2',
        run: function(){
          return !new Sequence([1, 2]).isEmpty;
        }
      }, {
        name: 'emptyness3',
        run: function(){
          return new Sequence([1]).tail.isEmpty;
        }
      }, {
        name: 'product1',
        run: function(){
          return Sequence.listProduct([]).isEmpty;
        }
      }, {
        name: 'product2',
        run: function(){
          return Sequence.listProduct([[1, 2]]).list;
        },
        result: [[1], [2]]
      }, {
        name: 'dropWhile2',
        run: function(){
          return Sequence.iterate((function(it){
            return it * 2;
          }), 1).dropWhile((function(it){
            return it < 1000;
          })).head;
        },
        result: 1024
      }
    ]
  };
  testTests = {
    name: 'Tests',
    skip: false,
    log: true,
    suite: [
      {
        name: "isomorphism 1",
        'for': [anyPoint('a')],
        hold: function(p){
          console.log(p);
          return true || Point.iso(Point.iso(p).xy).point.isEqual(p);
        }
      }, {
        name: "1",
        run: function(){
          return 5;
        },
        result: 5,
        number: 10
      }, {
        name: "2",
        skip: true,
        'for': [anyNum().range(0, 10)],
        'with': function(n){
          return [n, n * n];
        },
        hold: function(n, x){
          return x < 16;
        },
        assuming: [function(x){
          return x % 2 === 0;
        }]
      }, {
        name: "3",
        skip: true,
        'for': [anyNum(), anyNum()],
        hold: function(n, m){
          return n >= m;
        }
      }
    ]
  };
  window.testTests = testTests;
  testPoints = {
    name: 'Points',
    number: 10,
    suite: [
      {
        name: "isomorphism 1",
        'for': [anyPoint('A')],
        holds: function(p){
          return Point.iso(Point.iso(p).xy).point.isEqual(p);
        }
      }, {
        name: "copy 1",
        run: function(){
          return point([3, 4]).copy();
        },
        result: point([3, 4])
      }, {
        name: "superpose",
        'for': [anyPoint(), anyPoint()],
        holds: function(p1, p2){
          return p1.superpose(p1, p2).isEqual(p2);
        }
      }, {
        name: "isomorphism 1",
        'for': [anyPoint()],
        hold: function(p){
          return Point.iso(Point.iso(p).xy).point.isEqual(p);
        }
      }, {
        name: "isomorphism 2",
        'for': [anyPos()],
        hold: function(xy){
          return equal(Point.iso(Point.iso(xy).point).xy, xy);
        }
      }, {
        name: "copy 1",
        'for': [anyPoint()],
        hold: function(p){
          return p.copy().isEqual(p);
        }
      }, {
        name: "coordinates 1",
        'for': [anyPoint()],
        hold: function(p){
          return origin.at(p).isEqual(point(p));
        }
      }, {
        name: "equality 1",
        'for': [anyPoint()],
        hold: function(p){
          return p.isEqual(p);
        }
      }, {
        name: "equality 2",
        'for': [anyPoint()],
        hold: function(p){
          return point(p.xy).isEqual(p);
        }
      }, {
        name: "equality 3",
        'for': [anyPoint()],
        hold: function(p){
          return !p.copy().translate([1, 1]).isEqual(p);
        }
      }, {
        name: "translate 1",
        run: function(){
          return new Point().translate([1, 2]).xy;
        },
        result: [1, 2]
      }
    ]
  };
  testTransformations = {
    name: 'Transformations',
    suite: []
  };
  testLines = {
    name: 'Lines',
    suite: [
      {
        number: 10,
        suite: [
          {
            name: "isomorphism 1",
            'for': [anyLine(), anyNum()],
            assuming: [function(l){
              return l.isNontrivial;
            }],
            hold: function(l, s){
              return equal(l.locus(l.point(s)), s);
            }
          }, {
            name: "isomorphism 2",
            'for': [anyPoint(), anyNum()],
            where: function(p, s){
              return [l, s];
            },
            hold: function(p, s){
              var l;
              l = line(p, p);
              return l.isTrivial && equal(l.locus(l.point(s)), 0);
            }
          }, {
            name: "isomorphism 3",
            'for': [anyLine(), anyNum()],
            assuming: [function(l){
              return l.isNontrivial;
            }],
            hold: function(l, s){
              var p;
              p = l.point(s);
              return equal(l.point(l.locus(p)), p);
            }
          }, {
            name: "equation 1",
            'for': [anyLine(), anyNum()],
            hold: function(l, s){
              return l.equation(l.point(s));
            }
          }, {
            name: "equation 2",
            'for': [anyLine(), anyNum()],
            assuming: [function(l){
              return l.isNontrivial;
            }],
            hold: function(l, s){
              return !l.equation(l.point(s).translate(l.normalV(0)));
            }
          }
        ]
      }, {
        name: "line intersections 1",
        'for': [anyLine(), anyLine()],
        assuming: [function(a, b){
          return !(a.isTrivial || b.isTrivial);
        }],
        hold: function(a, b){
          return a.intersections(b).length === (a.isParallelTo(b) ? 0 : 1);
        }
      }, {
        name: "plane intersections 1",
        'for': [anyLine()],
        assuming: [function(l){
          return plane.isEnclosing(l.refPoint);
        }],
        hold: function(l){
          var pts;
          pts = plane.intersections(l);
          return pts.every(function(p){
            return plane.isContaining(p);
          });
        }
      }, {
        name: "perpendicularity 1",
        'for': [anyLine('a'), anyPoint('A')],
        'with': function(l, p){
          return [l, p, new Line('b').at(p).perpendicularTo(l)];
        },
        assuming: [function(l){
          return l.isNontrivial;
        }],
        hold: function(l, p, nl){
          return nl.isPerpendicularTo(l);
        }
      }, {
        name: "perpendicularity 2",
        'for': [anyLine()],
        hold: function(l){
          return !l.isPerpendicularTo(line(origin, origin));
        }
      }, {
        name: "perpendicularity 3",
        'for': [anyLine('1'), anyLine('2')],
        'with': function(l1, l2){
          return [l1, l2, l1.perpendicularTo(l2).label('p')];
        },
        assuming: [function(l1, l2, p){
          return l1.isNontrivial && l2.isNontrivial;
        }],
        hold: function(l1, l2, p){
          return p.refPoint.isEqual(l1.refPoint) && gequal(p.locus(p.intersections(l2)[0]), 0);
        }
      }, {
        name: "parallelity 1",
        'for': [anyLine(), anyPos()],
        assuming: [function(l){
          return l.isNontrivial;
        }],
        hold: function(l, xy){
          return new Line().at(xy).parallelTo(l).isParallelTo(l);
        }
      }, {
        name: "parallelity 2",
        'for': [anyLine()],
        hold: function(l){
          return !l.isParallelTo(line(origin, origin));
        }
      }, {
        name: "tangentTo 1",
        'for': [anyPoint(), anyCircle()],
        'with': function(p, c){
          var t, i;
          t = new Line().at(p).tangentTo(c);
          i = c.intersections(t);
          return [p, c, t, i];
        },
        hold: function(p, c, t, i){
          return i.length === 1 && new Line().at(i[0]).perpendicularTo(t).isContaining(c.center);
        },
        assuming: [function(p, c){
          return c.isNontrivial && !c.isEnclosing(p);
        }]
      }, {
        name: "tangentTo 2",
        'for': [anyCircle(), anyParam()],
        'with': function(c, x){
          return [c, x, new Line().at(c.point(x)).tangentTo(c)];
        },
        hold: function(c, x, t){
          return t.isPerpendicularTo(c.radius(x));
        },
        assuming: [function(c){
          return c.isNontrivial;
        }]
      }, {
        name: 'tangentTo 3',
        'for': [anyPoint(), anyCircle()],
        'with': function(p, c){
          var t1, t2, i1, i2;
          t1 = new Line().at(p).tangentTo(c, 1);
          t2 = new Line().at(p).tangentTo(c, -1);
          i1 = c.locus(c.intersections(t1)[0]);
          i2 = c.locus(c.intersections(t2)[0]);
          return [p, c, t1, t2, i1, i2];
        },
        hold: function(p, c, t1, t2, i1, i2){
          return t1.vector.dot(c.tangentV(i1)) > 0 && t2.vector.dot(c.tangentV(i2)) < 0;
        },
        assuming: [function(p, c){
          return c.isNontrivial && !c.isEnclosing(p);
        }]
      }, {
        name: 'LineEquation',
        number: 10,
        suite: [
          {
            name: '1',
            'for': [anyPos(), anyPos()],
            hold: function(p1, p2){
              return lineEquation(p1, p2)(0).isEqual(point(p1));
            }
          }, {
            name: '2',
            'for': [anyPos(), anyPos()],
            hold: function(p1, p2){
              return lineEquation(p1, p2)(1).isEqual(point(p2));
            }
          }, {
            name: '4',
            run: function(){
              return lineEquation([0, 0], [1, 2], 2)(1);
            },
            result: point([2, 4])
          }, {
            name: '5',
            run: function(){
              return lineEquation([0, 0], [1, 2], 2)(-1);
            },
            result: point([-2, -4])
          }, {
            name: '6',
            run: function(){
              return lineEquation([0, 0], [0, 1])(0);
            },
            result: point([0, 0])
          }, {
            name: '7',
            run: function(){
              return lineEquation([0, 0], [0, 1])(2);
            },
            result: point([0, 2])
          }, {
            name: '8',
            run: function(){
              return lineEquation([1, 2], [1, 2])(0);
            },
            result: point([1, 2])
          }, {
            name: '9',
            run: function(){
              return lineEquation([1, 2], [1, 2])(1);
            },
            result: point([1, 2])
          }, {
            name: '10',
            run: function(){
              return lineEquation([1, 2], [0, 0], -1)(0);
            },
            result: point([1, 2])
          }, {
            name: '11',
            run: function(){
              return lineEquation([1, 2], [0, 0], -1)(1);
            },
            result: point([2, 4])
          }
        ]
      }, {
        name: "intersectionV",
        suit: [
          {
            name: '1',
            run: function(){
              return intersectionV([0, 0], [1, 2], [0, 0], [2, 1]);
            },
            result: [0, 0]
          }, {
            name: '2',
            run: function(){
              return intersectionV([1, 2], [1, 1], [2, 1], [-1, 1]);
            },
            result: [1, 2]
          }, {
            name: '3',
            run: function(){
              return intersectionV([1, 0], [0, 1], [0, 1], [1, 0]);
            },
            result: [1, 1]
          }, {
            name: '5',
            run: function(){
              return intersectionV([1, 2], [-1, -2], [3, 4], [-3, -4]);
            },
            result: [0, 0]
          }, {
            name: '6',
            run: function(){
              return intersectionV([1, 2], [1, 2], [3, 4], [2, 4]);
            },
            result: [Infinity, Infinity]
          }, {
            name: '7',
            run: function(){
              return intersectionV([1, 2], [1, 2], [1, 2], [-2, -4]);
            },
            result: [Infinity, Infinity]
          }
        ]
      }
    ]
  };
  allTests = {
    number: 100,
    log: true,
    suite: [testSequence, testTests]
  };
  console.log('Running tests...');
  Test.run(allTests);
  console.log('Testing done');
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
