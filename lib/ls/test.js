// Generated by LiveScript 1.6.0
(function(){
  var implies, labeled, anyParam, anyPoint, anyAngleValue, mkAngle, anyAngle, anySegment, anyLine, anyRay, anyRadius, anyCircle, anyTriangle, Any, testSequence, testTests;
  implies = function(P, Q){
    if (P) {
      return Q;
    } else {
      return true;
    }
  };
  labeled = curry$(function(f, l){
    return function(){
      var x, res$, i$, to$;
      res$ = [];
      for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
        res$.push(arguments[i$]);
      }
      x = res$;
      if (l) {
        return f.apply(null, x).label(l);
      } else {
        return f.apply(null, x);
      }
    };
  });
  anyParam = function(a, b){
    a == null && (a = 0);
    b == null && (b = 1);
    return anyNum().range(a, b).precision(0.01).ascending();
  };
  anyPoint = function(l){
    return args(anyPos()).iso(labeled(point, l), function(p){
      return [p.xy];
    });
  };
  anyAngleValue = function(){
    return new ArbitraryNumber(0, 360).precision(1).ascending();
  };
  mkAngle = function(v, s, e){
    var x$;
    x$ = new Angle();
    x$.vertex = v;
    x$.start = s;
    x$.end = e;
    return x$;
  };
  anyAngle = function(){
    return args(anyPoint(), anyAngleValue(), anyAngleValue()).iso(mkAngle, function(a){
      return [a.vertex, a.start, a.end];
    });
  };
  anySegment = function(l){
    return args(anyPoint(), anyPoint()).iso(labeled(segment, l), function(s){
      return [s.point(0), s.point(1)];
    });
  };
  anyLine = function(l){
    return args(anyPoint(), anyPoint()).iso(labeled(line, l), function(l){
      return [l.point(0), l.point(1)];
    });
  };
  anyRay = function(l){
    return args(anyPoint(), anyAngleValue()).iso(labeled(ray, l), function(r){
      return [r.start, r.angle(0)];
    });
  };
  anyRadius = function(){
    return anyNum().range(1, paperSize / 4).precision(0.25).ascending();
  };
  anyCircle = function(){
    return args(anyRadius(), anyPoint()).iso(circle, function(c){
      return [c.R, c.center];
    }).ascending();
  };
  anyTriangle = function(){
    return args(anyPoint(), anyPoint(), anyPoint()).iso(new Triangle, function(it){
      return it.vertices;
    }).filter(function(it){
      return it.isNontrivial;
    });
  };
  Any = {
    num: anyNum,
    param: anyParam,
    point: anyPoint,
    xy: anyPos,
    angle: anyAngle,
    angleValue: anyAngleValue,
    line: anyLine,
    ray: anyRay,
    segment: anySegment,
    circle: anyCircle,
    triangle: anyTriangle
  };
  window.Any = Any;
  testSequence = {
    name: 'Sequences',
    log: true,
    suite: [
      {
        name: 'head',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).head;
        },
        result: 1
      }, {
        name: 'tail1',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).tail.head;
        },
        result: 2
      }, {
        name: 'tail2',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).tail.tail.head;
        },
        result: 3
      }, {
        name: 'list1',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).list;
        },
        result: [1, 2, 3, 4, 5]
      }, {
        name: 'take1',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).take(3).list;
        },
        result: [1, 2, 3]
      }, {
        name: 'take2',
        run: function(){
          return new Sequence([1, 2, 3, 4, 5]).take(30).list;
        },
        result: [1, 2, 3, 4, 5]
      }, {
        name: 'emptyness1',
        run: function(){
          return new Sequence([]).isEmpty;
        }
      }, {
        name: 'emptyness2',
        run: function(){
          return !new Sequence([1, 2]).isEmpty;
        }
      }, {
        name: 'emptyness3',
        run: function(){
          return new Sequence([1]).tail.isEmpty;
        }
      }, {
        name: 'product1',
        run: function(){
          return Sequence.listProduct([]).isEmpty;
        }
      }, {
        name: 'product2',
        run: function(){
          return Sequence.listProduct([[1, 2]]).list;
        },
        result: [[1], [2]]
      }, {
        name: 'dropWhile2',
        run: function(){
          return Sequence.iterate((function(it){
            return it * 2;
          }), 1).dropWhile((function(it){
            return it < 1000;
          })).head;
        },
        result: 1024
      }
    ]
  };
  testTests = {
    name: 'Tests',
    skip: false,
    log: true,
    suite: [
      {
        name: "1",
        run: function(){
          return 5;
        },
        result: 5,
        number: 10
      }, {
        name: "2",
        'for': [anyNum().range(0, 100).precision(0.1)],
        hold: function(n){
          return n < 4;
        },
        number: 10
      }, {
        name: "3",
        'for': [anyNum(), anyNum()],
        hold: function(n, m){
          return n >= m;
        },
        log: false
      }, {
        name: "4",
        'for': [anyCircle(), anyPoint()],
        assuming: [function(c, p){
          return c.R > 1 && c.center.isNotEqual(p);
        }],
        hold: function(c, p){
          return !c.isEnclosing(p);
        }
      }
    ]
  };
  window.testSequence = testSequence;
  window.testTests = testTests;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
