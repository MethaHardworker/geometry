// Generated by LiveScript 1.6.0
(function(){
  var Stream;
  Stream = (function(){
    Stream.displayName = 'Stream';
    var prototype = Stream.prototype, constructor = Stream;
    function Stream(rest, buffer){
      this.rest = rest;
      this.buffer = buffer != null
        ? buffer
        : [];
      if (empty(this.buffer)) {
        this.next;
      }
    }
    Object.defineProperty(Stream.prototype, 'empty', {
      get: function(){
        return empty(this.buffer) && this.emptyRest;
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(Stream.prototype, 'next', {
      get: function(){
        var x;
        if (!(x = this.rest.next()).done) {
          this.buffer.push(x.value);
        }
        this.emptyRest = x.done;
        return this;
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(Stream.prototype, 'head', {
      get: function(){
        if (!this.empty) {
          if (empty(this.buffer)) {
            this.next;
          }
          return this.buffer[0];
        } else {
          return undefined;
        }
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(Stream.prototype, 'tail', {
      get: function(){
        if (!this.empty) {
          if (empty(this.buffer)) {
            this.next;
          }
          return new Stream(this.rest, tail(this.buffer));
        } else {
          return undefined;
        }
      },
      configurable: true,
      enumerable: true
    });
    Stream.fromList = function(lst){
      return new Stream(function*(){}, lst);
    };
    Stream.rnd = function(a, b){
      return new Stream(Gen.rnd(a, b));
    };
    Object.defineProperty(Stream.prototype, 'toList', {
      get: function(){
        var res, x;
        res = this.buffer;
        while (!(x = this.rest.next()).done) {
          res.push(x.value);
        }
        return res;
      },
      configurable: true,
      enumerable: true
    });
    Stream.prototype.take = function(n){
      return new Stream(Gen.take(n)(this.rest)(this.buffer));
    };
    Stream.prototype.toString = function(){
      switch (false) {
      case !this.empty:
        return '<empty>';
      case !this.emptyRest:
        return "<" + this.buffer + ">";
      default:
        return "<" + this.buffer + " ...>";
      }
    };
    return Stream;
  }());
  window.Stream = Stream;
}).call(this);
