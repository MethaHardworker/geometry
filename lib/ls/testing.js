// Generated by LiveScript 1.6.0
(function(){
  var failedParams, failedFigures, testCount, failedTests, M, C, runTests, foldJSON, runTest;
  failedParams = {};
  failedFigures = {};
  testCount = 0;
  failedTests = {};
  M = Monoid;
  C = console;
  runTests = function(json){
    var go, normalization, normalized;
    go = function(t){
      var i$, ref$, len$, entry;
      switch (false) {
      case !t.run:
        return runTest(t);
      case !t['for']:
        return property(t);
      case !t.suite:
        if (t.log && t.name) {
          C.group("Testing " + t.name);
        }
        for (i$ = 0, len$ = (ref$ = t.suite).length; i$ < len$; ++i$) {
          entry = ref$[i$];
          go(entry);
        }
        if (t.log && t.name) {
          return C.groupEnd();
        }
        break;
      case !t.skip:
        break;
      default:

      }
    };
    normalization = [foldJSON('name', M.path(':'), ''), foldJSON('log', M.or), foldJSON('number', M.keep, json.number) || 100];
    normalized = M.fold(M.composition, normalization);
    return go(normalized(json));
  };
  foldJSON = function(field, m, mempty){
    var empty, go;
    empty = m.mempty || mempty;
    go = function(value){
      return function(json){
        var res, newvalue, rec;
        res = import$({}, json);
        newvalue = m.mappend(value, res[field] || empty);
        rec = {};
        if (res.suite) {
          rec.suite = map(go(newvalue), res.suite);
        } else {
          res[field] = newvalue;
        }
        return import$(res, rec);
      };
    };
    return function(json){
      return go(json[field] || empty)(json);
    };
  };
  runTest = function(test){
    var result;
    if (!test.skip) {
      if (test.log) {
        C.log("Testing " + test.name + "...");
      }
      result = test.run();
      if (!equal(result, test.result)) {
        C.groupCollapsed('%cTest %s failed', 'color:red', test.name);
        C.log('  expected: %c%s', 'color:blue', test.result.toString());
        C.log('  got:      %c%s', 'color:blue', result.toString());
        return C.groupEnd();
      } else {
        if (test.log) {
          return C.log("%cPassed.", 'color:darkgreen');
        }
      }
    }
  };
  window.foldJSON = foldJSON;
  window.runTests = runTests;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
