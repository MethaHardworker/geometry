// Generated by LiveScript 1.6.0
(function(){
  var M, C, S, G, Test, Arbitrary, args, ArbitraryNumber, anyNum, anyPos, exports, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  M = Monoid;
  C = console;
  S = Sequence;
  G = Gen;
  Test = (function(){
    Test.displayName = 'Test';
    var foldJSON, runTest, runProperty, reportSuccess, reportFail, checkProperty, prototype = Test.prototype, constructor = Test;
    Test.failed = {
      params: {},
      figures: {},
      tests: {}
    };
    foldJSON = function(field, m, mempty){
      var empty, go;
      empty = m.mempty || mempty;
      go = function(value){
        return function(json){
          var res, newvalue, rec;
          res = import$({}, json);
          newvalue = m.mappend(value, res[field] || empty);
          rec = {};
          if (res.suite) {
            rec.suite = map(go(newvalue), res.suite);
          } else {
            res[field] = newvalue;
          }
          return import$(res, rec);
        };
      };
      return function(json){
        return go(json[field] || empty)(
        json);
      };
    };
    Test.run = function(json){
      var i$, ref$, len$, t;
      for (i$ = 0, len$ = (ref$ = constructor.flatten(
      constructor.normalize(
      json))).length; i$ < len$; ++i$) {
        t = ref$[i$];
        switch (false) {
        case !t.skip:
          continue;
        case !t.run:
          runTest(t);
          break;
        case !t['for']:
          runProperty(t);
        }
      }
    };
    Test.normalize = function(json){
      return M.fold(M.composition, [foldJSON('name', M.path(':'), ''), foldJSON('log', M.or), foldJSON('skip', M.replace), foldJSON('number', M.keep, json.number || 100)])(
      json);
    };
    Test.flatten = function(json){
      switch (false) {
      case !(json != null && json.suite):
        return concatMap(constructor.flatten, json.suite);
      default:
        return [json];
      }
    };
    runTest = function(test){
      var result, expected;
      if (!test.skip) {
        if (test.log) {
          C.log("Testing " + test.name + "...");
        }
        result = test.run();
        expected = test.result || true;
        if (!equal(result, expected)) {
          C.groupCollapsed('%cTest %s failed', 'color:red', test.name);
          C.log('  expected: %c%s', 'color:blue', expected.toString());
          C.log('  got:      %c%s', 'color:blue', result.toString());
          return C.groupEnd();
        } else {
          if (test.log) {
            return C.log("%cPassed.", 'color:darkgreen');
          }
        }
      }
    };
    runProperty = function(data){
      var options, res;
      options = {
        skip: false,
        assuming: [],
        hold: function(){
          return true;
        },
        shrinks: 500,
        including: [],
        number: 123
      };
      import$(options, data);
      if (!options.skip) {
        if (options.log) {
          C.log("Testing " + options.name + " ...");
        }
        res = checkProperty(options);
        switch (false) {
        case !(res.applied === 0):
          return C.log("%cNone of samples in test \"%s\" passed assumptions!", 'color:red', options['name']);
        case !res.ok:
          return reportSuccess(res, options);
        default:
          return reportFail(res, options);
        }
      }
    };
    reportSuccess = function(res, options){
      var passed, color;
      if (options.log) {
        passed = res.applied / res.samples;
        color = (function(){
          switch (false) {
          case !(passed < 0.25):
            return 'orange';
          case !(passed < 0.5):
            return 'goldenrod';
          default:
            return 'darkgreen';
          }
        }());
        return C.log('%cOk. Total samples: %d, %cpassed assumptions: %s', 'color:darkgreen', res.samples, 'color:' + color, fmt.percent(passed));
      }
    };
    reportFail = function(res, options){
      var augmentedArgs, name, params, i$, len$, x;
      augmentedArgs = options['with'] || function(){
        var x, res$, i$, to$;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        x = res$;
        return arrayFrom$(x);
      };
      name = options.name;
      params = apply(augmentedArgs, res.sample);
      C.groupCollapsed("%cProperty " + name + " failed!", 'color: red');
      C.log("Counter example (" + res.shrinks + " shrinks):");
      for (i$ = 0, len$ = params.length; i$ < len$; ++i$) {
        x = params[i$];
        C.log('%c' + x.toString(), 'color: blue');
      }
      C.groupEnd();
      constructor.failed.params[name] = params;
      constructor.failed.tests[name] = options;
      return constructor.failed.figures[name] = new Group(params.filter((function(it){
        return it instanceof Figure;
      })));
    };
    checkProperty = function(options){
      var ac, c, sc, augmentedArgs, assertion, assumption, proposition, test, samples, shrinker, simplicity, number, run, runc, res, counts;
      ac = {
        counter: 0
      };
      c = {
        counter: 0
      };
      sc = {
        counter: -2
      };
      augmentedArgs = options['with'] || function(){
        var x, res$, i$, to$;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        x = res$;
        return arrayFrom$(x);
      };
      assertion = compose(options.hold, augmentedArgs);
      assumption = function(x){
        return count(c)(
        apply(conjunction(options.assuming), x));
      };
      proposition = function(x){
        return count(ac)(
        apply(assertion, x));
      };
      test = implies(assumption, proposition);
      samples = function(){
        return Arbitrary.tuple(options['for']);
      };
      shrinker = samples().shrink;
      simplicity = function(r){
        if (r.sample) {
          return samples().simplicity(r.sample);
        } else {
          return Infinity;
        }
      };
      number = options.number;
      run = function(seq, ok, depth, last){
        var res, h, sh;
        ok == null && (ok = true);
        depth == null && (depth = 0);
        res = seq.dropWhile(test);
        switch (false) {
        case !res.isEmpty:
          return {
            ok: ok,
            sample: last
          };
        case !(!ok && res.tail.isEmpty):
          return {
            ok: ok,
            sample: res.head
          };
        default:
          h = res.head;
          sh = shrinker(h).take(options.shrinks);
          switch (false) {
          case !(depth > options.shrinks):
            return {
              ok: ok,
              sample: h
            };
          case !sh.isEmpty:
            return {
              ok: ok,
              sample: h
            };
          default:
            return runc(sh, false, depth + 1, h);
          }
        }
      };
      runc = count(sc)(
      run);
      res = runc(samples().take(number));
      counts = {
        samples: c.counter,
        applied: ac.counter,
        shrinks: sc.counter
      };
      return import$(res, counts);
    };
    function Test(){}
    return Test;
  }());
  window.Test = Test;
  Arbitrary = (function(superclass){
    var simper, shrinker, prototype = extend$((import$(Arbitrary, superclass).displayName = 'Arbitrary', Arbitrary), superclass).prototype, constructor = Arbitrary;
    function Arbitrary(tailGen, shrink){
      this.tailGen = tailGen;
      this.shrink = shrink;
      Arbitrary.superclass.apply(this, arguments);
      this.shrink == null && (this.shrink = function(n){
        return new Sequence([n]);
      });
      this.simplicity = function(){
        return Infinity;
      };
      this.simplest = undefined;
    }
    Arbitrary.copy = function(obj){
      var x$, res, y$;
      x$ = res = new Arbitrary();
      x$.isEmpty = obj.isEmpty;
      x$.head = obj.head;
      x$.tailGen = obj.tailGen;
      if (obj instanceof Arbitrary) {
        y$ = res;
        y$.elements = obj.elements && obj.elements.copy();
        y$.simplicity = obj.simplicity;
        y$.simplest = obj.simplest;
        y$.shrink = obj.shrink;
      }
      return res;
    };
    simper = function(e, n){
      return e.simplicity(n);
    };
    shrinker = function(x, n){
      return function(){
        return x.shrink(n).generator();
      };
    };
    Arbitrary.tuple = function(xs){
      var x$, res;
      x$ = res = Arbitrary.copy(
      S.tuple(xs));
      x$.elements = xs;
      x$.simplicity = function(ns){
        return norm(
        zipWith(simper, xs, ns));
      };
      x$.simplest = map(function(it){
        return it.simplest;
      }, xs);
      x$.shrink = function(ns){
        var p, x$;
        p = G.product(
        zipWith(shrinker, xs, ns));
        x$ = new Sequence(p);
        x$.ascendingBy(res.simplicity, res.simplest);
        x$.tail;
        return x$;
      };
      return x$;
    };
    Arbitrary.prototype.iso = function(constr, destr){
      var shf, x$;
      shf = Arbitrary.tuple(this.elements).shrink;
      x$ = Arbitrary.copy(this.apply(constr));
      x$.elements = this.elements;
      x$.simplicity = compose$(destr, this.simplicity);
      x$.simplest = apply(constr)(map(function(it){
        return it.simplest;
      }, this.elements));
      x$.shrink = compose$(destr, shf, function(it){
        return it.apply(constr);
      });
      return x$;
    };
    Arbitrary.prototype.ascending = function(){
      return this.ascendingBy(this.simplicity, this.simplest);
    };
    return Arbitrary;
  }(Sequence));
  args = function(){
    var x, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    x = res$;
    return Arbitrary.tuple(arrayFrom$(x));
  };
  ArbitraryNumber = (function(superclass){
    var numShrink, roundUp, prototype = extend$((import$(ArbitraryNumber, superclass).displayName = 'ArbitraryNumber', ArbitraryNumber), superclass).prototype, constructor = ArbitraryNumber;
    function ArbitraryNumber(min, max){
      this.min = min;
      this.max = max;
      ArbitraryNumber.superclass.call(this, G.rnd(min, max, roundUp(0.1)));
      this.prec = 0.1;
      this.shrink = numShrink(this.prec);
      this.simplicity = abs;
      this.simplest = 0;
    }
    numShrink = curry$(function(tol, b){
      var x$;
      x$ = S.iterate(function(x){
        return roundUp(tol)((x + b) / 2);
      }, 0);
      x$.takeWhile(function(x){
        return abs(x - b) >= tol;
      });
      return x$;
    });
    roundUp = curry$(function(p, x){
      return p * round(x / p);
    });
    ArbitraryNumber.prototype.precision = function(prec){
      var x$;
      x$ = new ArbitraryNumber(this.min, this.max);
      x$.prec = prec;
      x$.tailGen = function(){
        return G.rnd(this.min, this.max, roundUp(prec));
      };
      x$.shrink = numShrink(prec);
      return x$;
    };
    ArbitraryNumber.prototype.range = function(min, max){
      var x$;
      x$ = new ArbitraryNumber(min, max);
      x$.prec = this.prec;
      x$.tailGen = function(){
        return G.rnd(min, max, roundUp(this.prec));
      };
      x$.shrink = numShrink(this.prec);
      return x$;
    };
    return ArbitraryNumber;
  }(Arbitrary));
  anyNum = function(){
    return new ArbitraryNumber(0, 10).ascending();
  };
  anyPos = function(min, max){
    var x, y, xy, x$;
    min == null && (min = -15);
    max == null && (max = 15);
    x = new ArbitraryNumber(min, max).precision(0.25);
    y = new ArbitraryNumber(min, max).precision(0.25);
    xy = Arbitrary.tuple([x, y]);
    x$ = Arbitrary.tuple([x, y]);
    x$.simplicity = norm;
    x$.simplest = [0, 0];
    x$.shrink = function(p){
      var srinks;
      srinks = xy.shrink(p).take(500).list;
      return new Sequence(sortBy(norm, srinks));
    };
    x$.ascending();
    return x$;
  };
  exports = {
    Arbitrary: Arbitrary,
    args: args,
    ArbitraryNumber: ArbitraryNumber,
    anyNum: anyNum,
    anyPos: anyPos
  };
  import$(window, exports);
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
