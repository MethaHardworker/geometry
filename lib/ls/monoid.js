// Generated by LiveScript 1.6.0
(function(){
  var Monoid;
  Monoid = {
    sum: {
      mappend: function(x, y){
        return x + y;
      },
      mempty: 0
    },
    product: {
      mappend: function(x, y){
        return x * y;
      },
      mempty: 1
    },
    string: {
      mappend: function(x, y){
        switch (false) {
        case !!x:
          return y;
        case !!y:
          return x;
        default:
          return x + y;
        }
      },
      mempty: ''
    },
    path: function(sep){
      return {
        mappend: function(x, y){
          switch (false) {
          case !!x:
            return y;
          case !!y:
            return x;
          default:
            return x + sep + y;
          }
        },
        mempty: ''
      };
    },
    free: {
      mappend: function(x, y){
        return x.concat(y);
      },
      mempty: []
    },
    max: {
      mappend: max,
      mempty: -Infinity
    },
    min: {
      mappend: min,
      mempty: Infinity
    },
    or: {
      mappend: function(x, y){
        return x || y;
      },
      mempty: false
    },
    and: {
      mappend: function(x, y){
        return x && y;
      },
      mempty: true
    },
    first: {
      mappend: function(x, y){
        return x || y;
      },
      mempty: undefined
    },
    second: {
      mappend: function(x, y){
        return y || x;
      },
      mempty: undefined
    },
    composition: {
      mappend: function(f, g){
        return compose$(g || id, f || id);
      },
      mempty: id
    },
    object: {
      mappend: function(x, y){
        return Object.assign(Object.assign({}, x), y);
      },
      mempty: {}
    }
  };
  Monoid.keep = Monoid.second;
  Monoid.replace = Monoid.first;
  Monoid.fold = function(m, list){
    return list.reduce(m.mappend, m.mempty);
  };
  window.Monoid = Monoid;
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
