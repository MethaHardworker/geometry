// Generated by LiveScript 1.6.0
(function(){
  var destr, rnd, bind, product, sum, zip, applyG, take, list, cons, dropWhile, takeWhile, iterate, filterG, tailG, G;
  destr = function(g){
    var x;
    x = g.next();
    if (x.done) {
      return null;
    } else {
      return {
        head: x.value,
        tail: g
      };
    }
  };
  rnd = function*(a, b, f){
    f == null && (f = id);
    for (;;) {
      (yield f(a + (b - a) * Math.random()));
    }
  };
  bind = function*(g, proc){
    var x;
    while (!(x = g.next()).done) {
      (yield* proc(x.value));
    }
  };
  /** Uses thunks to recreate generators */
  product = function*(gs){
    (yield* (yield* (function*(){
      switch (false) {
      case gs.length !== 0:
        return function*(){};
      case gs.length !== 1:
        return bind(gs[0](), function*(x){
          (yield [x]);
        });
      case !(gs.length >= 0):
        return bind(gs[0](), function*(x){
          (yield* bind(product(tail(gs)), function*(xs){
            (yield [x].concat(xs));
          }));
        });
      }
    }())));
  };
  sum = function*(gs){
    switch (false) {
    case gs.length !== 0:
      return;
    case !(gs.length >= 0):
      (yield* gs[0]);
      (yield* sum(tail(gs)));
    }
  };
  zip = function*(gs){
    var res;
    for (;;) {
      res = map(fn$, gs);
      if (any(fn1$, res)) {
        break;
      }
      (yield map(fn2$, res));
    }
    function fn$(g){
      return g.next();
    }
    function fn1$(x){
      return x.done;
    }
    function fn2$(x){
      return x.value;
    }
  };
  applyG = function*(f, g){
    var x;
    while (!(x = g.next()).done) {
      (yield f.apply(null, x));
    }
  };
  take = function*(n, g){
    var i, x;
    i = n;
    while (!(i-- <= 0 || (x = g.next()).done)) {
      (yield x.value);
    }
  };
  list = function*(lst){
    var i$, len$, x;
    for (i$ = 0, len$ = lst.length; i$ < len$; ++i$) {
      x = lst[i$];
      (yield x);
    }
  };
  cons = function*(x, g){
    (yield x);
    (yield* g);
  };
  dropWhile = function*(p, g){
    var x;
    while (!((x = g.next()).done || !p(x.value))) {}
    (yield x.value);
    (yield* g);
  };
  takeWhile = function*(p, g){
    var x;
    while (!(x = g.next()).done && p(x.value)) {
      if (p(x.value)) {
        (yield x.value);
      }
    }
  };
  iterate = function*(f, x0){
    var x;
    (yield (x = x0));
    for (;;) {
      (yield (x = f(x).g));
    }
  };
  filterG = function*(p, g){
    var x;
    while (!(x = g.next()).done) {
      if (p(x)) {
        (yield x);
      }
    }
  };
  tailG = function*(g){
    g.next();
    (yield* g);
  };
  G = {
    destr: destr,
    tail: tailG,
    rnd: rnd,
    bind: bind,
    product: product,
    sum: sum,
    take: take,
    zip: zip,
    apply: applyG,
    list: list,
    dropWhile: dropWhile,
    takeWhile: takeWhile,
    iterate: iterate,
    filter: filterG
  };
  window.G = G;
}).call(this);
